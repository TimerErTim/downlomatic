plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.0' apply false
}

subprojects {
    group 'eu.timerertim'

    apply plugin: 'java'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib"


        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    }
    
    test {
        useJUnitPlatform()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions.jvmTarget = "11"
    }
}


def GROUP = "downlomatic"

tasks.register("runServer") {
    group GROUP
    description "Runs the server with development optimised arguments"

    def programArguments = ["--no-file-logging", "-v"]

    dependsOn tasks.getByPath("server:run").configure {
        args = programArguments
    }
}

tasks.register("runClient") {
    group GROUP
    description "Runs the client with development optimised arguments connecting to the official server"

    def programArguments = ["--no-file-logging", "-v"]
    ext.programArgumentsBase = programArguments

    dependsOn tasks.getByPath("client:runShadow").configure {
        args = programArguments
    }
}

tasks.register("runClientLocally") {
    group GROUP
    description "Runs the client locally, connecting to the running local server, with development optimised arguments"

    def programArguments = runClient.ext.programArgumentsBase + "--local"

    dependsOn tasks.getByPath("client:runShadow").configure {
        args = programArguments
    }
}

tasks.register("distServer") {
    group GROUP
    description "Packs the server as distributable under the build/server/ directory"

    dependsOn "server:installDist"
    doLast {
        copy {
            from "${project("server").buildDir}/install", {
                include "**"
            }
            into "$buildDir"
        }
    }
}

tasks.register("distClient") {
    group GROUP
    description "Packs the client as distributable under the build/client/ directory"

    dependsOn "client:runtimeZip"
    doLast {
        copy {
            from "${project("client").buildDir}", {
                include "downlomatic-*-*.zip"
            }
            into "$buildDir/${project("client").name}"
        }
    }
}